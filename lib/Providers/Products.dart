import 'dart:convert'; //This import is added to convert json formats in dart and vice versa

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:new_shop_app/models/http_exception.dart';

import './Product.dart';

class Products with ChangeNotifier {
  List<Product> _items = [
    /*Product(
      id: 'p1',
      title: 'Red Shirt',
      description: 'A red shirt - it is pretty red!',
      price: 29.99,
      imageUrl:
          'https://cdn.pixabay.com/photo/2016/10/02/22/17/red-t-shirt-1710578_1280.jpg',
    ),
    Product(
      id: 'p2',
      title: 'Trousers',
      description: 'A nice pair of trousers.',
      price: 59.99,
      imageUrl:
          'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Trousers%2C_dress_%28AM_1960.022-8%29.jpg/512px-Trousers%2C_dress_%28AM_1960.022-8%29.jpg',
    ),
    Product(
      id: 'p3',
      title: 'Yellow Scarf',
      description: 'Warm and cozy - exactly what you need for the winter.',
      price: 19.99,
      imageUrl:
          'https://live.staticflickr.com/4043/4438260868_cc79b3369d_z.jpg',
    ),
    Product(
      id: 'p4',
      title: 'A Pan',
      description: 'Prepare any meal you want.',
      price: 49.99,
      imageUrl:
          'https://upload.wikimedia.org/wikipedia/commons/thumb/1/14/Cast-Iron-Pan.jpg/1024px-Cast-Iron-Pan.jpg',
    ),*/
  ];
  // var _showFavouritesOnly = false;

  final String authToken;
  final String userId;
  Products(this.authToken, this.userId, this._items);

  List<Product> get items {
    // if (_showFavouritesOnly == true) {
    //   return _items.where((product) => product.isFavourite == true).toList();
    // }
    return [..._items];
  } //this is done to make _items immutable from outside, but only through functions defined in this file.

  List<Product> get favouriteItems {
    return _items.where((product) => product.isFavourite == true).toList();
  } //this is done to get favourite items only when the favourite only filter is applied

  // void showFavourites(){
  //   _showFavouritesOnly=true;
  //   notifyListeners();
  // }
  // void showAll(){
  //   _showFavouritesOnly=false;
  //   notifyListeners();
  // }

  Future<void> fetchAndSetProducts([bool filterByUser = false]) async {
    final filterString =
        filterByUser ? 'orderBy="creatorId"&equalTo="$userId"' : '';
    final url =
        'https://my-server-270c6.firebaseio.com/products.json?auth=$authToken&$filterString';
    // final url =
    //     'https://my-server-270c6.firebaseio.com/products.json?auth=$authToken&orderBy="creatorId"&equalTo="$userId"';
    final url1 =
        'https://my-server-270c6.firebaseio.com/userFavourites/UserID-$userId.json?auth=$authToken';
    try {
      final response = await http.get(url);
      
      final extractedProducts =
          json.decode(response.body) as Map<String, dynamic>;
      print(extractedProducts);
      if (extractedProducts == null) {
        return;
      }
      final favouriteResponse = await http.get(url1);
      final favouriteData = json.decode(favouriteResponse.body);
      print(favouriteData);
      final List<Product> loadedProducts = [];
      extractedProducts.forEach((productId, productData) {
        loadedProducts.add(Product(
          id: productId,
          title: productData['title'],
          description: productData['description'],
          price: productData['price'],
          imageUrl: productData['imageUrl'],
          isFavourite: favouriteData == null
              ? false
              : favouriteData['ProductID-$productId'] ?? false,
        ));
      });
      _items = loadedProducts;
      notifyListeners();
    } catch (error) {
      print(error);
      throw error;
    }
  }

  Future<void> addProduct(Product product) async {
    final url =
        'https://my-server-270c6.firebaseio.com/products.json?auth=$authToken';
    try {
      final response = await http.post(
        url, //.post method is a future which adds these values provided in the body of the products folder in a database through my-server
        body: json.encode({
          //.encode is a dart(convert) method to convert dart maps into json maps
          'title': product.title,
          'price': product.price,
          'description': product.description,
          'imageUrl': product.imageUrl,
          'creatorId': userId,
        }),
      );
      print(json.decode(response
          .body)); //Prints a map of {'name':"/*uniqueid generated by the server*/ "}
      final newProduct = Product(
        title: product.title,
        description: product.description,
        price: product.price,
        imageUrl: product.imageUrl,
        id: json.decode(response.body)['name'],
      ); //this is done as we're receiving product with a 'null' id and we can't edit directly
      _items.add(newProduct);
      // _items.insert(0, newProduct) //to add to start of the list
      notifyListeners();
    } catch (error) {
      print('ADD PRODUCTS $error');
      throw error; //This throws(returns) error as a result.
    }
  }

  Future<void> updateProduct(String id, Product newProduct) async {
    final url =
        'https://my-server-270c6.firebaseio.com/products/$id.json?auth=$authToken';
    try {
      await http.patch(url,
          body: json.encode({
            'title': newProduct.title,
            'description': newProduct.description,
            'price': newProduct.price,
            'imageUrl': newProduct.imageUrl,
          }));

      final productIndex = _items.indexWhere((product) => product.id == id);
      _items[productIndex] =
          newProduct; //_items List is mutable in this file through these functions
      notifyListeners();
    } catch (error) {
      print(error);
      throw error;
    }
  }

  Future<void> deleteProduct(String id) async {
    final url =
        'https://my-server-270c6.firebaseio.com/products/$id.json?auth=$authToken';
    try {
      final existingProductIndex =
          _items.indexWhere((product) => product.id == id);
      var existingProduct = _items[existingProductIndex];
      _items.removeAt(existingProductIndex);
      notifyListeners();
      final response = await http.delete(url);
      if (response.statusCode >= 400) {
        _items.insert(existingProductIndex, existingProduct);
        notifyListeners();
        throw HttpException('Could not be deleted!');
      }
      existingProduct = null;
    } catch (error) {
      print(error);
      throw error;
    }
  }

  Product findProductById(String id) {
    return _items.firstWhere((product) => product.id == id);
  }
}
